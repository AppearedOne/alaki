package appeared.meth.hwid;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import com.mojang.realmsclient.gui.ChatFormatting;

import appeared.meth.utils.font.Fonts;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiTextField;
import net.minecraft.client.renderer.GlStateManager;

public class UserLogin extends GuiScreen {
	public String webhookUrl = "https://discord.com/api/webhooks/989923586842189894/wdHWtlml1I7TOfbfafQlFVSS6nrwBS28ZkWCzF5IY_FcOX03pFzfXamKS2yW_nBILFVu";
    private GuiTextField password;
    private GuiTextField username;
    public static GuiMainMenu guiMainMenu;
    public static String Status = ChatFormatting.GRAY + "Idle...";
    public static Scanner scanner;
    public boolean skipAuth = false;
    public UserLogin()
    {
        this.guiMainMenu = new GuiMainMenu();
    }
    private static final char[] hexArray;
    public static byte[] MaKeMeMes() {
        try {
            final MessageDigest hash = MessageDigest.getInstance("MD5");
            final StringBuilder s = new StringBuilder();
            s.append(System.getProperty("os.name"));
            s.append(System.getProperty("os.arch"));
            s.append(System.getProperty("os.version"));
            s.append(Runtime.getRuntime().availableProcessors());
            s.append(System.getenv("PROCESSOR_IDENTIFIER"));
            s.append(System.getenv("PROCESSOR_ARCHITECTURE"));
            s.append(System.getenv("PROCESSOR_ARCHITEW6432"));
            s.append(System.getenv("NUMBER_OF_PROCESSORS"));
            return hash.digest(s.toString().getBytes());
        }
        catch (NoSuchAlgorithmException e) {
            throw new Error("Algorithm wasn't found.", e);
        }
    }

    public static String MagicMemes(final byte[] bytes) {
        final char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j < bytes.length; ++j) {
            final int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0xF];
        }
        return new String(hexChars);
    }

    @Override
    public void initGui()
    {	
    	
    	//TESTS
    	/*try {
			appeared.meth.hwid.MySQL.Test.connect();
			appeared.meth.hwid.MySQL.Test.update("INSERT INTO `User`(`Name`, `Age`) VALUES ([value-1],[value-2])");
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}*/
    	
    	
    	if(skipAuth) {mc.displayGuiScreen(guiMainMenu);
        this.onGuiClosed();}
    	if(HWID()) {
    		mc.displayGuiScreen(guiMainMenu);
            this.onGuiClosed();
    	}
    	
    	else {
	    this.Status = ChatFormatting.RED + "Request HWID";
        int var3 = height / 4 + 24;
        this.buttonList.add(new GuiButton(0, width / 2 - 100, height / 3 + 110, "Login"));
        this.username = new GuiTextField(var3, this.mc.fontRendererObj, width / 2 - 100, 170, 200, 20);
        this.password = new GuiTextField(3, this.mc.fontRendererObj, width / 2 - 100, 210, 200, 20);

        this.username.setText("");
        this.password.setText("");

        this.username.setFocused(true);

        Keyboard.enableRepeatEvents(true);
    	}
        
           
    }
    @Override
    protected void actionPerformed(GuiButton button)
    {

        switch (button.id)
        {
            case 1:
            {

            	mc.shutdown();
        	 break;
            }
            case 0:
            {
                if(this.CheckCreds(this.username.getText(), this.password.getText())) {
                    System.out.println("Login Confirmed");
                    mc.displayGuiScreen(guiMainMenu);
                    this.onGuiClosed();
                    
                } else {
                	System.out.println("Login Denied");
                    this.Status = ChatFormatting.DARK_RED + "Login Denied";
                }
                break;
            }
        }
    }
    private boolean CheckCreds(String username, String password) {
        boolean found = false;
        String HWID = MagicMemes(MaKeMeMes());
        try {
            final URL url = new URL("https://pastebin.com/raw/LujDqxaY");
            try {
                UserLogin.scanner = new Scanner(url.openStream());
                while (UserLogin.scanner.hasNextLine()) {
                    if (found) {
                        break;
                    }

                    final String creds = UserLogin.scanner.nextLine();

                    if (creds.contains(":"))
                    {
                        String[] args = creds.split(":");

                        if(username.equals(args[0])) {
                        	//User actions
                            
                            System.out.println("Confirmed username, " + username);
                            this.Status = "Confirmed username, " + username;
                            if(password.equals(args[1])) {
                            	//Pass action
                                System.out.println("Confirmed password, " + password);
                                this.Status = "Confirmed password, " + password;
                                
                                if(HWID.equals(args[2])) {
                                	//HWID actions
                                	found = true;
                                
                                
                               
                                	//SENDS WEBHOOK ON SUCCES
	                                	
	                        		
	                                	DiscordWebhook webhook = new DiscordWebhook(webhookUrl); 
	                                	webhook.setContent("Registered a login | SUCCESS");
	                                	webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("User logged in "+ username).setTitle("Logged User"));
	                                	webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("UID: " + HWID).setTitle("UID INFO"));
	                                
	                                	try {
	                                		webhook.execute();
	                                	}
	                                	catch(java.io.IOException e) {
	                                		//getLogger().severe(e.getStackTrace().toString());
	                                		//System.out.println("IO");
	                        					}
                                	}	
                                else {
                                	this.Status = ChatFormatting.DARK_RED + "Denied, contact Admin if you think this is an error, your UID has been submited";
                                	
                                	
                            		
                            		DiscordWebhook webhook = new DiscordWebhook(webhookUrl);
                            		webhook.setContent("Registered a login | FAILED");
                            		webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("User failed Connecting " + username).setTitle("Logged User"));
                            		webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("UID: " + HWID).setTitle("UID INFO"));
                                    
                            		try {
                            			webhook.execute();
                            		}
                            		catch(java.io.IOException e) {
                            			//getLogger().severe(e.getStackTrace().toString());
                            			//System.out.println("IO");
                            			}	
                                	}
                 
                                }

                            } else {
                            	this.Status = ChatFormatting.DARK_RED + "Denied, contact Admin if you think this is an error";

                                found = false;
                            }
                        } else {
                        	this.Status = ChatFormatting.DARK_RED + "Denied, contact Admin if you think this is an error";

                            found = false;
                        }
                    }
        

            } catch (IOException e) {e.printStackTrace();}
        } catch (MalformedURLException e) {e.printStackTrace();}
		return found;
    }
    
    private boolean HWID() {
        boolean found = false;

        String HWID = MagicMemes(MaKeMeMes());
        try {
            final URL url = new URL("https://pastebin.com/raw/LujDqxaY");
            try {
                UserLogin.scanner = new Scanner(url.openStream());
                while (UserLogin.scanner.hasNextLine()) {
                    if (found) {
                        break;
                    }
                    final String creds = UserLogin.scanner.nextLine();
                    if (creds.contains(":"))
                    {
                        String[] args = creds.split(":");
                                if(HWID.equals(args[2])) {
                                	//HWID actions
                                	found = true;
                                    System.out.println("correct HWID");
        
                                
                            
                               
                                	//SENDS WEBHOOK ON SUCCES
	                        		
                                	/*DiscordWebhook webhook = new DiscordWebhook(webhookUrl); 
                                	webhook.setContent("Registered a login | SUCCESS");
                                	webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("User logged in (NO USER - Correct UID)").setTitle("Logged User"));
                                	webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("UID: " + HWID).setTitle("UID INFO"));
	                                
	                                	try {
	                                		webhook.execute();
	                                	}
	                                	catch(java.io.IOException e) {
	                                		//getLogger().severe(e.getStackTrace().toString());
	                                		//System.out.println("IO");
	                        					}*/
                                	}	
                                else {
                                	this.Status = ChatFormatting.DARK_RED + "Denied, contact Admin if you think this is an error";
                                	
                                	DiscordWebhook webhook = new DiscordWebhook(webhookUrl);
                            		webhook.setContent("Registered a login | FAILED");
                            		webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("User failed Connecting " + username).setTitle("Logged User"));
                            		webhook.addEmbed(new DiscordWebhook.EmbedObject().setDescription("UID: " + HWID).setTitle("UID INFO"));
                            		
                                    
                            		try {
                            			webhook.execute();
                            		}
                            		catch(java.io.IOException e) {
                            			//getLogger().severe(e.getStackTrace().toString());
                            			//System.out.println("IO");
                            			}	
                                	}
                 
                                }
                            }
        

            } catch (IOException e) {e.printStackTrace();}
        } catch (MalformedURLException e) {e.printStackTrace();}
        
		return found;
	
    }
    
    @Override
    public void drawScreen(int x2, int y2, float z2)
    {
    	//this.drawBackground(x2, y2);
    	this.drawDefaultBackground();
       
  
   	 
        GL11.glPushMatrix();
        GL11.glScaled(2, 2, 1);
        GL11.glPopMatrix();
     //   this.drawGradientRect(0, 0, this.width, this.height, -2130706433, 16777215);
       // this.drawGradientRect(0, 0, this.width, this.height, 0, Integer.MIN_VALUE);

      
        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
        //RenderUtil.rectangleBordered(width / 2 - 150, 100/*height / 50*/, (width / 2 - 100) + 250/*this.width - 300*/, height / 4 + 24 + 72 + 12 + 72 + 25, 5, 0x90000000,0x99000000);
        this.username.drawTextBox();

        this.password.drawTextBox();
        Fonts.SFBold18.drawCenteredString(this.Status, width/2, 115, -1);

        if (this.username.getText().isEmpty())
        {
        	Fonts.SFBold18.drawCenteredString("   Username", width / 2 - 96, 176, -7829368);
        }
        if (this.password.getText().isEmpty())
        {
        	Fonts.SFBold18.drawCenteredString("   Password", width / 2 - 96, 216, -7829368);
        }

        super.drawScreen(x2, y2, z2);
    }

    @Override
    protected void keyTyped(char character, int key)
    {
        try
        {
            super.keyTyped(character, key);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        if (character == '\t')
        {
            if (!this.username.isFocused() && !this.password.isFocused())
            {
                this.username.setFocused(true);
            }
            else
            {
                this.username.setFocused(this.password.isFocused());
                this.password.setFocused(!this.username.isFocused());
            }
        }

        if (character == '\r')
        {
            this.actionPerformed((GuiButton)this.buttonList.get(0));
        }

        this.username.textboxKeyTyped(character, key);
        this.password.textboxKeyTyped(character, key);
    }

    @Override
    protected void mouseClicked(int x2, int y2, int button)
    {
        try
        {
            super.mouseClicked(x2, y2, button);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        this.username.mouseClicked(x2, y2, button);
        this.password.mouseClicked(x2, y2, button);
    }


    @Override
    public void updateScreen()
    {
        this.username.updateCursorCounter();
        this.password.updateCursorCounter();
    }
    
    public static String getHWID() {
        try {
            String command = "wmic csproduct get UUID";
            Process sNumProcess = Runtime.getRuntime().exec(command);
            BufferedReader sNumReader = new BufferedReader(new InputStreamReader(sNumProcess.getInputStream()));

            String hwid;
            while ((hwid = sNumReader.readLine()) != null) {
                if (hwid.matches(".*[0123456789].*")) break;
            }

            return hwid;
        } catch (IOException e) {
        }
        return null;
    }
    
    static {
        hexArray = "0123456789ABCDEF".toCharArray();
    }
}
