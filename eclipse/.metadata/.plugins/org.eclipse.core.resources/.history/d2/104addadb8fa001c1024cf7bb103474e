package appeared.meth.module.impl.Movement;

import com.google.common.eventbus.Subscribe;

import appeared.meth.Meth;
import appeared.meth.events.EventType;
import appeared.meth.events.impl.PacketEvent;
import appeared.meth.events.impl.UpdateEvent;
import appeared.meth.gui.notifications.Notification;
import appeared.meth.gui.notifications.NotificationType;
import appeared.meth.module.Module;
import appeared.meth.module.data.Category;
import appeared.meth.module.data.ServerType;
import appeared.meth.settings.impl.BooleanSetting;
import appeared.meth.settings.impl.ModeSetting;
import appeared.meth.utils.chat.ChatUtil;
import appeared.meth.utils.player.MoveUtil;
import appeared.meth.utils.world.EntityUtil;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.network.play.client.C03PacketPlayer;

@Getter
@Setter
public class LongJump extends Module {
    public ModeSetting mode = new ModeSetting("Mode", "Verus", "Dev");
    private double verusBoost;
    public boolean shouldJump;
    public BooleanSetting disable = new BooleanSetting("Disable", true);
    public int ticks;
    public LongJump() {
        super("LongJump", "We longjump XD", Category.MOVEMENT, ServerType.All);
        this.addSettings(mode, disable);
    }

    @Override
    public void onEnable() {
        double x = mc.thePlayer.posX;
        double y = mc.thePlayer.posY;
        double z = mc.thePlayer.posZ;

        shouldJump = true;
        if (mc.thePlayer.onGround) {
            switch (mode.getMode()) {
                case "Watchdog":
                    for (int i = 0; i < 49; i++) {
                        mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.0625D, z, false));
                        mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, false));

                    }
                    mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
                    break;
                case "Verus":
                	ticks = 0;
                    verusBoost = 3.4;
                    EntityUtil.damageVerus();
                    break;
               case "Dev":
            	    ticks = 0;
            	    verusBoost = 3.4;
                    EntityUtil.damageVerus();
                	break;
            }
        } else {
            ChatUtil.log("You must be onground!");
        }

        super.onEnable();
    }

    @Override
    public void onDisable() {
        mc.timer.timerSpeed = 1f;
        super.onDisable();
        ticks = 0;
    }

    @Subscribe
    public void onUpdate(UpdateEvent e) {
        this.setSuffix(mode.getMode());
        switch (mode.getMode()) {
            case "Watchdog":
                if (e.getType() == EventType.Pre) {
                    if (MoveUtil.isMoving()) {

                        if (mc.thePlayer.onGround) {
                            if (shouldJump) {
                                mc.thePlayer.motionY = 0.70F;
                                shouldJump = false;
                            } else {
                                mc.timer.timerSpeed = 1f;
                                this.setToggled(false);
                            }
                        }
                    }
                }
                if(e.getType() == EventType.Post){
                    MoveUtil.setMotion(MoveUtil.getBaseMoveSpeed() * 1.14F);
                }
                break;
            case "Verus":
            	ticks++;
            	//ChatUtil.log("Ticks " + ticks);
                if (MoveUtil.isMoving()) {
                    if (mc.thePlayer.onGround && shouldJump) {
                        mc.thePlayer.motionY = 0.42F;
                    }
                    if (mc.thePlayer.hurtTime != 0) {
                        MoveUtil.setMotion(verusBoost);
                        verusBoost -= 0.05;
                    }
                    if (mc.thePlayer.lastTickPosY > mc.thePlayer.posY) {
                        mc.thePlayer.motionY *= 0.83;
                    }
                    if ((mc.thePlayer.onGround && !shouldJump) || mc.thePlayer.isInWater()) {
                        this.setToggled(false);
                    }
                }
                if(disable.getValue()) {
                if(ticks > 3) {
                	if(mc.thePlayer.onGround) {
                		this.setToggled(false);
                		Meth.getInstance().addNotification(new Notification("Disabled LongJump", "Disabled due to Ground", 1500, NotificationType.WARNING));		
                		}
                }
               }
                break;
                
            case "Dev":
                	ticks++;
                	ChatUtil.log("Ticks " + ticks);
                    if (MoveUtil.isMoving()) {
                    	if(ticks >= 7) {
                    		
                    		mc.thePlayer.onGround = true;
                    		mc.thePlayer.motionY = 0.0;
                    		MoveUtil.setMotion(0.2);
                    		
                    		ticks = 0;
                    	}
                        if (mc.thePlayer.onGround && shouldJump) {
                            mc.thePlayer.motionY = 0.42F;
                        }
                        if (mc.thePlayer.hurtTime != 0) {
                            MoveUtil.setMotion(verusBoost);
                            verusBoost -= 0.05;
                        }
                        if (mc.thePlayer.lastTickPosY > mc.thePlayer.posY) {
                            mc.thePlayer.motionY *= 0.83;
                        }
                        if ((mc.thePlayer.onGround && !shouldJump) || mc.thePlayer.isInWater()) {
                            this.setToggled(false);
                        }
                    }
                    if(disable.getValue()) {
                    if(ticks > 3) {
                    	if(mc.thePlayer.onGround) {
                    		this.setToggled(false);
                    		Meth.getInstance().addNotification(new Notification("Disabled LongJump", "Disabled due to Ground", 1500, NotificationType.WARNING));		
                    		}
                    }
                    break;
                }
        }
    }
    
    public void onPacket(PacketEvent e) {
    	
    }
}
