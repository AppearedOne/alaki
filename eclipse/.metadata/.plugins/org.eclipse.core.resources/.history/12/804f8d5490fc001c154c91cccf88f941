package appeared.alaki.module.impl.Exploits;

import com.google.common.eventbus.Subscribe;

import appeared.alaki.Alaki;
import appeared.alaki.events.EventType;
import appeared.alaki.events.impl.PacketEvent;
import appeared.alaki.events.impl.UpdateEvent;
import appeared.alaki.module.Module;
import appeared.alaki.module.ModuleManager;
import appeared.alaki.module.data.Category;
import appeared.alaki.module.data.ServerType;
import appeared.alaki.module.impl.Movement.Fly;
import appeared.alaki.settings.impl.ModeSetting;
import appeared.alaki.settings.impl.NumberSetting;
import appeared.alaki.utils.chat.ChatUtil;
import appeared.alaki.utils.math.Stopwatch;
import appeared.alaki.utils.packet.PacketUtil;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.ArrayList;
import java.util.LinkedList;

@Getter
@Setter
public class Disabler extends Module {
    public ModeSetting mode = new ModeSetting("Mode", "Watchdog", "Watchdog2", "Verus", "VulcanTimer");
    private LinkedList<Packet> packets = new LinkedList<>();
    public Stopwatch timer = new Stopwatch();
    private boolean expectedTeleport;
    public NumberSetting lag = new NumberSetting("Lag", 50, 1, 1, 100);
    int vulcanTick = 0;
    Packet packet, lpacket, llpacket;
    int ticks = 0;
    public Disabler() {
        super("Disabler", "Disabler xD", Category.EXPLOIT, ServerType.All);
        lag.setParent(mode, "Verus");
        this.addSettings(mode, lag);
    }

    @Override
    public void onEnable() {
        expectedTeleport = false;
        super.onEnable();
    }


    @Subscribe
    public void onUpdate(UpdateEvent e) {
        this.setSuffix(mode.getMode());
        switch (mode.getMode()) {
            case "Watchdog":
                if (mc.thePlayer.ticksExisted == 80 && !expectedTeleport) {
                    mc.thePlayer.ticksExisted = 0;
                    expectedTeleport = true;
                }
                if (timer.hasReached(120)) {
                    while (!packets.isEmpty()) {
                        mc.thePlayer.sendQueue.addToSendQueueSilent(packets.poll());
                    }
                    timer.reset();
                }
                if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 7) {
                    mc.thePlayer.sendQueue.addToSendQueueSilent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                }
                break;
            case "Watchdog2":
                if (timer.hasReached(120)) {
                    while (!packets.isEmpty()) {
                        mc.thePlayer.sendQueue.addToSendQueueSilent(packets.poll());
                    }
                    timer.reset();
                }
                if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 7)
                    mc.thePlayer.sendQueue.addToSendQueueSilent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                break;
            case "VulcanTimer":
            	ticks++;
            	
            	break;
        }
    }

    @Subscribe
    public void onPacket(PacketEvent e) {
        if (mc.thePlayer == null) return;
        switch (mode.getMode()) {
            case "Watchdog2":
                if (e.getPacket() instanceof C03PacketPlayer) {
                    if (mc.thePlayer.ticksExisted < 80) {
                        e.setCanceled();
                    }
                }

                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packet = (C03PacketPlayer) e.getPacket();
                    if (!mc.thePlayer.isUsingItem() && !packet.isMoving()) {
                        e.setCanceled();
                    }
                }

                if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) e.getPacket();
                    PacketUtil.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), false));
                    mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
                    mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                    mc.thePlayer.prevPosX = mc.thePlayer.posX;
                    mc.thePlayer.prevPosY = mc.thePlayer.posY;
                    mc.thePlayer.prevPosZ = mc.thePlayer.posZ;
                    mc.displayGuiScreen(null);
                    e.setCanceled();
                }

                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCanceled();
                }

                if (mc.getNetHandler().doneLoadingTerrain) {
                    if (!e.isCanceled() && (e.getPacket() instanceof C03PacketPlayer || e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive)) {
                        e.setCanceled();
                        packets.add(e.getPacket());
                    }
                }
                break;

            case "Watchdog":

                if (mc.thePlayer.ticksExisted == 60) {
                    mc.displayGuiScreen(null);
                }
                if (e.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted < 70) {
                    e.setCanceled();
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCanceled();
                }
                if (mc.getNetHandler().doneLoadingTerrain) {
                    if (!e.isCanceled() && (e.getPacket() instanceof C03PacketPlayer || e.getPacket() instanceof C0FPacketConfirmTransaction || e.getPacket() instanceof C00PacketKeepAlive)) {
                        e.setCanceled();
                        packets.add(e.getPacket());
                    }
                }

                if (e.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer packet = (C03PacketPlayer) e.getPacket();
                    if (!mc.thePlayer.isUsingItem() && !packet.isMoving()) {
                        e.setCanceled();
                    }
                }


                if (e.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) {
                    C03PacketPlayer.C05PacketPlayerLook packet = (C03PacketPlayer.C05PacketPlayerLook) e.getPacket();
                    if (!mc.thePlayer.onGround) {
                        e.setCanceled();
                        //ChatUtil.log("jewing packets plaese wait");
                        mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), false));
                    }
                }

                if (e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                    C03PacketPlayer.C06PacketPlayerPosLook packet = (C03PacketPlayer.C06PacketPlayerPosLook) e.getPacket();
                   // ChatUtil.log("jewing packets plaese wait");
                    if (!mc.thePlayer.onGround) {
                       // e.setCanceled();
                       // ChatUtil.log("jewing packets plaese wait");
                        //mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), false));
                    }
                }

                //if(!ModuleManager.getModule(Fly.class).isToggled()) {

                if (e.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) e.getPacket();
                    mc.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), false));
                    mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
                       /*
                        mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;

                        mc.thePlayer.prevPosX = mc.thePlayer.posX;
                        mc.thePlayer.prevPosY = mc.thePlayer.posY;
                        mc.thePlayer.prevPosZ = mc.thePlayer.posZ;

                        */
                    mc.displayGuiScreen(null);
                    e.setCanceled();
                }
                //}

                if (mc.thePlayer.ticksExisted % 4 == 0) {
                    PacketUtil.sendPacket(new C0CPacketInput());
                }
                break;
            case "Verus":
                if (this.mc.thePlayer.ticksExisted < 30) {
                    return;
                }

                if (e.getPacket() instanceof C00PacketKeepAlive && this.mc.thePlayer.ticksExisted % 3 == 1) {
                    e.setCanceled(true);
                }

                if (mc.thePlayer.ticksExisted % 2 == 0) {
                    PacketUtil.sendPacket(new C0CPacketInput());
                }

                this.mc.thePlayer.isAirBorne = false;

                if (e.getPacket() instanceof C03PacketPlayer && !this.timer.hasReached((double) this.lag.getValue() * 10.0)) {
                    //e.setCanceled(true);
                    mc.thePlayer.sendQueue.addToSendQueueSilent(new C00PacketKeepAlive(4));
                }

                if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                    C13PacketPlayerAbilities packet = (C13PacketPlayerAbilities) e.getPacket();
                    packet.setAllowFlying(true);
                    packet.setCreativeMode(true);
                    packet.setInvulnerable(true);
                    packet.setFlying(true);
                    e.setPacket(packet);
                }
                this.timer.reset();
                break;

            case "VulcanTimer":
            	if(e.getType().Outgoing != null){
            	vulcanTick++;
            	
            
            	e.setCanceled(true);
            	llpacket = packet;
            	lpacket = packet;
            	packet = e.getPacket();
            	
            	if(!(vulcanTick == 4)){
            		ChatUtil.log("Sent " + llpacket + " Tick: " + ticks);
            		mc.thePlayer.sendQueue.addToSendQueueSilent(llpacket);
            		vulcanTick = 0;
            	}else {
            		ChatUtil.log("Canceled " + llpacket);
            	}
            		
            	}
            	
            	break;
        }

    }
}
