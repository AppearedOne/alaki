package appeared.alaki.module.impl.Render;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.util.ResourceLocation;

import java.awt.*;

import appeared.alaki.Alaki;
import appeared.alaki.module.Module;
import appeared.alaki.module.data.Category;
import appeared.alaki.module.data.ServerType;
import appeared.alaki.settings.impl.BooleanSetting;
import appeared.alaki.settings.impl.ModeSetting;
import appeared.alaki.settings.impl.NumberSetting;
import appeared.alaki.utils.animations.Animation;
import appeared.alaki.utils.font.Fonts;
import appeared.alaki.utils.font.MCFontRenderer;
import appeared.alaki.utils.render.ColorUtil;
import appeared.alaki.utils.render.RenderUtil;


public class Hud extends Module {
    public static BooleanSetting customFont = new BooleanSetting("Custom Font", true);
    public static BooleanSetting hideVisuals = new BooleanSetting("Hide Render on HUD", false);
    public static BooleanSetting blurOn = new BooleanSetting("Blur", true);
    public static ModeSetting hudType = new ModeSetting("Watermark", "Alaki", "RGB", "Novoline", "Basic", "Round");
    public static ModeSetting wtc = new ModeSetting("Watermark Color", "Alaki", "Alternative");
    public static BooleanSetting backGArray = new BooleanSetting("Background", true);
    public static ModeSetting arraylistType = new ModeSetting("ArrayList", "Normal", "Basic");
    public static ModeSetting colorMode = new ModeSetting("Color", "Astolfo","LightRainbow", "Static");
    public static ModeSetting suffixMode = new ModeSetting("Suffix", "None", "Dash");
    public static BooleanSetting bpsCounter = new BooleanSetting("BPS Counter", false);
    public static BooleanSetting coordsC = new BooleanSetting("Coords", false);
    public static BooleanSetting fpsCounter = new BooleanSetting("FPS Counter", false);
    public static NumberSetting offsetCount = new NumberSetting("Offset", 1, 1, 1, 20);
    
    public Hud() {
        super("Hud", "Displays Info", Category.RENDER, ServerType.All);
        backGArray.setParent(arraylistType, "Alaki", "Normal");
        wtc.setParent(hudType, "Alaki");
        addSettings(hudType, wtc, colorMode, arraylistType, backGArray, customFont,hideVisuals,suffixMode, blurOn, bpsCounter, offsetCount);
        setTogglable(false);
        setToggled(true);
    }

    public void drawHud(ScaledResolution sr) {
        String bps = "BPS " + String.format("%.2f", Math.hypot(mc.thePlayer.posX - mc.thePlayer.prevPosX, mc.thePlayer.posZ - mc.thePlayer.prevPosZ) * (double) mc.timer.timerSpeed * 20.0D);
        String coords = "XYZ: " + mc.thePlayer.getPosition().getX() + "," + mc.thePlayer.getPosition().getY() + "," + mc.thePlayer.getPosition().getZ();
        String titleString = Alaki.name.charAt(0) + ColorUtil.COLORRESET + Alaki.name.substring(1) + " " + Alaki.version;
        String fps = "FPS " + Minecraft.getDebugFPSString();
        int count = 0;
        Color backdropD = new Color(1, 1, 1, 190);
        switch (hudType.getMode()) {
            case "Alaki":
            	
                //Fonts.SFReg24.drawString("Alaki", 5, 5, 0x9FFFFFFF);
                Fonts.SFReg24.drawString(""+ Alaki.buildType + " " + Alaki.version, 4, 28, 0x9FFFFFFF);
                //Fonts.SFReg24.drawString("" + Alaki.version, 70, Fonts.axi45.getHeight() - 8, 0x9FFFFFFF);
                
                switch(wtc.getMode()){
            	case "Alaki":
            		RenderUtil.drawImage(-1, -1, 90, 60, new ResourceLocation("alaki/icons/Alaki1.png"));
            		break;
            	case "Alternative":
            		RenderUtil.drawImage(2, -1, 90, 60, new ResourceLocation("alaki/icons/Alaki2.png"));
            		break;
            	}
                break;
            case "Basic":
            	Fonts.Arial45.drawString("Alaki", 4, 4, 0x9FFFFFFF);   
            	Fonts.Arial18.drawString("" + Alaki.buildType + " " + Alaki.version, 16, 24, 0x9FFFFFFF);   
            	break;
            case "Round":
            	RenderUtil.drawImage(6, 6, 43, 40, new ResourceLocation("alaki/icons/logoViper.png"));
            	Fonts.Arial18.drawString("" + Alaki.buildType + " " + Alaki.version, 9, 50, 0x3a5ef0);
            	break;
            case "RGB":
            	drawBackRGB();

                RenderUtil.drawOutlinedRoundedRect(0,10,150,49,0,1, new Color(1,1,1, 1).getRGB());
                Fonts.SFBold18.drawString(Alaki.name + " | " + Alaki.buildType + " " + Alaki.version + " | " + appeared.alaki.hwid.UserLogin.currentUser,17,14, -1);
                Fonts.SFBold18.drawString(Alaki.name,17,14, ColorUtil.getAstolfoColor(2000000, 2).getRGB());
                break;
            default:
                Color backdrop = new Color(26, 26, 26, 179);
                Fonts.SFReg24.drawStringWithShadow(titleString, 3.5f, 5.5f,  ColorUtil.getColor(0));

                break;
           
        }
        if(arraylistType.getMode().equals("Normal")) {
        Color backdrop = new Color(26, 26, 26, 179);

        float y = 3f;
        count = 0;
        double xOffset = offsetCount.getValue();

        try {
        	
            for (Module mod : Alaki.moduleManager.sortedLength(Fonts.apple18)) {
                mod.updateRender();
                if(!mod.isToggled() && !mod.isAnimating())
                    continue;

                double animValue = (customFont.getValue() ? Fonts.apple18.getStringWidth(mod.getFormattedName()) : mc.fontRendererObj.getStringWidth(mod.getFormattedName())) * 2f;

                double x1 = sr.getScaledWidth() - (customFont.getValue() ? Fonts.apple18.getStringWidth(mod.getFormattedName()) : mc.fontRendererObj.getStringWidth(mod.getFormattedName())) - xOffset - 5;
                x1 += Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue);
                double y1 = y;
                double x2 = sr.getScaledWidth() - xOffset;
                x2 += Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue);
                double y2 = y + 11;

                if(backGArray.getValue())
                	RenderUtil.drawRect(x1, y1, x2, y2, backdrop.getRGB());

                int color = ColorUtil.getColor(count * 20);
                double finalX = (float) ((Fonts.apple18.getStringWidth(mod.getFormattedName()) - xOffset)) - 3;

                if(customFont.getValue()) {
                    Fonts.apple18.drawStringWithShadow(mod.getFormattedName(), (float) (sr.getScaledWidth() - Fonts.apple18.getStringWidth(mod.getFormattedName()) - xOffset) - 3 + Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue), y + 2.5, color);
                } else {
                    mc.fontRendererObj.drawStringWithShadow(mod.getFormattedName(), (float) ((float) (sr.getScaledWidth() - mc.fontRendererObj.getStringWidth(mod.getFormattedName()) - xOffset) - 2.5 + Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue)), (float) (y + 2.5), color);
                }

                
                	RenderUtil.drawRect(x2, y1, x2 + 1, y2, color);
                y += 11f;
                count += 1;
            }
        } catch (Exception ignored) {
        }
        
        
        
        if(bpsCounter.getValue()) {
        	Fonts.apple18.drawStringWithShadow(bps, 2.0f, sr.getScaledHeight() - 9, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
        }
        if(fpsCounter.getValue()) {
        	Fonts.apple18.drawStringWithShadow(fps, 2.0f, sr.getScaledHeight() - 18, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
        }
        //if(coordsC.getValue()) {
        	//Fonts.apple18.drawStringWithShadow(coords, 2.0f, sr.getScaledHeight() - 9, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
        //}
        

    }
        if(arraylistType.getMode().equals("Basic")) {
            Color backdrop = new Color(26, 26, 26, 179);

            float y = 3f;
            count = 0;
            double xOffset = offsetCount.getValue();

            try {
            	
                for (Module mod : Alaki.moduleManager.sortedLength(Fonts.apple18)) {
                    mod.updateRender();
                    if(!mod.isToggled() && !mod.isAnimating())
                        continue;

                    double animValue = (customFont.getValue() ? Fonts.apple18.getStringWidth(mod.getFormattedName()) : mc.fontRendererObj.getStringWidth(mod.getFormattedName())) * 2f;

                    double x1 = sr.getScaledWidth() - (customFont.getValue() ? Fonts.apple18.getStringWidth(mod.getFormattedName()) : mc.fontRendererObj.getStringWidth(mod.getFormattedName())) - xOffset - 5;
                    x1 += Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue);
                    double y1 = y;
                    double x2 = sr.getScaledWidth() - xOffset;
                    x2 += Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue);
                    double y2 = y + 11;


                    int color = new Color(250,250,250).getRGB();
                    double finalX = (float) ((Fonts.apple18.getStringWidth(mod.getFormattedName()) - xOffset)) - 3;

                    if(customFont.getValue()) {
                        Fonts.apple18.drawStringWithShadow(mod.getFormattedName(), (float) (sr.getScaledWidth() - Fonts.apple18.getStringWidth(mod.getFormattedName()) - xOffset) - 3 + Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue), y + 2.5, color);
                    } else {
                        mc.fontRendererObj.drawStringWithShadow(mod.getFormattedName(), (float) ((float) (sr.getScaledWidth() - mc.fontRendererObj.getStringWidth(mod.getFormattedName()) - xOffset) - 2.5 + Animation.getDoubleFromPercentage(100 - mod.animation.getPercent(), animValue)), (float) (y + 2.5), color);
                    }

                    
                    //RenderUtil.drawRect(x2, y1, x2 + 1, y2, color);
                    y += 11f;
                    count += 1;
                }
            } catch (Exception ignored) {
            }
            
            
            
            if(bpsCounter.getValue()) {
            	Fonts.apple18.drawStringWithShadow(bps, 2.0f, sr.getScaledHeight() - 9, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
            }
            if(fpsCounter.getValue()) {
            	Fonts.apple18.drawStringWithShadow(fps, 2.0f, sr.getScaledHeight() - 18, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
            }
            //if(coordsC.getValue()) {
            	//Fonts.apple18.drawStringWithShadow(coords, 2.0f, sr.getScaledHeight() - 9, ColorUtil.getAstolfoColor(1000000, 0).getRGB());
            //}
            

        }
}
    private static void drawBackRGB() {
    	Color backdropD = new Color(1, 1, 1, 190);
    	int red = ColorUtil.getAstolfoColor(200000, 1).getRed();
    	int green = ColorUtil.getAstolfoColor(200000, 1).getGreen();
    	int blue = ColorUtil.getAstolfoColor(200000, 1).getBlue();
    	RenderUtil.drawRect(4, 8, 150, 25, backdropD.getRGB());
    	RenderUtil.drawRect(4, 6, 150, 8, new Color(red, green, blue, 180).getRGB());
    }
}
